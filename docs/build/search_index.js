var documenterSearchIndex = {"docs": [

{
    "location": "index.html#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": ""
},

{
    "location": "index.html#LARLIB.jl-1",
    "page": "Home",
    "title": "LARLIB.jl",
    "category": "section",
    "text": ""
},

{
    "location": "index.html#Dependencies-1",
    "page": "Home",
    "title": "Dependencies",
    "category": "section",
    "text": "LARVIEW.jl has one Julia dependency and one Python dependency:LARLIB\nPyplasm"
},

{
    "location": "index.html#Docstrings-conventions-1",
    "page": "Home",
    "title": "Docstrings conventions",
    "category": "section",
    "text": "Bold is used to point out theory concepts. For example, look at the  \"2-skeletons\" word in the docstring of LARLIB.skel_merge:cuboidGrid(shape::Array{Int64,1}[, full=false])::Union{LAR,LAR_Model}Monospace is used for everything code related. Look e.g. at \"Points\",  \"Cells\" and \"Hpc\" in the definition docstring of mkpol:mkpol(verts::Points, cells::Cells)::Hpcnote: Note\nIn Julia REPL the monospace text is the one colored differently. In a terminal you will see something like:   (Image: Julia REPL monospace exaple)"
},

{
    "location": "larview.html#",
    "page": "LARVIEW",
    "title": "LARVIEW",
    "category": "page",
    "text": ""
},

{
    "location": "larview.html#Viewing-cellular-complexes-1",
    "page": "LARVIEW",
    "title": "Viewing cellular complexes",
    "category": "section",
    "text": ""
},

{
    "location": "larview.html#Introduction-1",
    "page": "LARVIEW",
    "title": "Introduction",
    "category": "section",
    "text": "Visualization of geometric and/or topological data is a must for a project that concerns geometric modeling, numerical simulations, and/or graphics rendering of simulation results. The LARVIEW.jl package provides visualization services to LARLIB.jl, the julia ongoing implementation of the LAR (Linear Algebraic Representation) scheme for solid and geometric modeling, well-based on linear algebra and algebraic concepts of cellular and chain complexes.  LARLIB is implemented using only dense and sparse arrays, and without need of fancy complicated data structures that are usual for non-manifold solid modeling. LAR has a large semantic coverage,  including geometric and topological modeling, domain modeling for physical simulations, geographical mapping, computer graphics, computer vision and robotics.Visualization of data structures generated by the Julia package LARLIB are currently produced by making use of the Python package pyplasm, the current implementation of the geometric language PLaSM (Programming LAnguage for Solid Modeling). See the Wiley\'s book  Geometric Programming for Computer-Aided Design for more information.(Image: )Figure 1: Visualization of the LARLIB.jl model refectory of type Struct, obtained by hirarchical aggregation of two cellular complexes table and chair."
},

{
    "location": "larview.html#Types-for-data-and-viewing-operations-1",
    "page": "LARVIEW",
    "title": "Types for data and viewing operations",
    "category": "section",
    "text": "To get a proper view of data types used by LARVIEW and LARLIB packages, look at the Glossary document."
},

{
    "location": "larview.html#List-of-currently-available-primitives-1",
    "page": "LARVIEW",
    "title": "List of currently available primitives",
    "category": "section",
    "text": "The functions of the package can be classified in three subsets.   The first group contains functions to return Python lists of either Cells or Points, according to the pyplasm semantics;cells2py(cells::Cells)::PyObject\n\npoints2py(V::Points)::PyObject\n\nmkpol(verts::Points, cells::Cells)::HpcThe second one is the set of method implementations for the view function, that either directly displays a Hpc object, or generates and displays this argument starting from different combinations of LARVIEW and LARLIB types;view(hpc::Hpc)\n\nview(V::Points, CV::Cells)\n\nview(model::LAR_Model)\n\nview(pair::Tuple{Points,Cells})The third group generates an Hpc object, to be subsequently displayed by some view call.hpc_exploded( model::LAR_Model)(sx=1.2, sy=1.2, sz=1.2)::Hpc\n\nlar2hpc(V::Points, CV::Cells)::Hpc\n\nlar2hpc(model::LAR_Model)::Hpc\n\nlar2exploded_hpc(V::Points,CV::Cells)::HpcAnother set of methods will be dedicated to display cell indices of various cell complexes, using different colors for each Cells object, but it was not yet been ported to Julia."
},

{
    "location": "larview.html#Examples-1",
    "page": "LARVIEW",
    "title": "Examples",
    "category": "section",
    "text": "(Image: )Figure 2: Visualization of cellular 2- and 3-complexes generated by LARLIB.jl package: (a) 2D disk; (b) cylinder surface in 3D; (c) 2-sphere surface in 3D; (3) toroidal surface in 3D."
},

{
    "location": "larview.html#Main-Interface-1",
    "page": "LARVIEW",
    "title": "Main Interface",
    "category": "section",
    "text": "LARVIEW.larview"
},

{
    "location": "glossary.html#",
    "page": "Glossary",
    "title": "Glossary",
    "category": "page",
    "text": ""
},

{
    "location": "glossary.html#Glossary-of-types-1",
    "page": "Glossary",
    "title": "Glossary of types",
    "category": "section",
    "text": ""
},

{
    "location": "glossary.html#Points-1",
    "page": "Glossary",
    "title": "Points",
    "category": "section",
    "text": "Alias declation of LAR-specific data structure. Dense Matrix Mtimes N to store the position of vertices (0-cells) of a cellular complex. The number of rows M is the dimension  of the embedding space. The number of columns N is the number of 0-cells."
},

{
    "location": "glossary.html#Cells-1",
    "page": "Glossary",
    "title": "Cells",
    "category": "section",
    "text": "Alias declation of LAR-specific data structure. Dense Array of Array to store the indices of vertices of P-cells of a cellular complex.  The linear space of P-chains is generated by Cells as a basis. Simplicial P-chains have P+1 vertex indices for cell element in Cells array. Cuboidal P-chains have 2^P vertex indices for cell element in Cells array. Other types of chain spaces may have different numbers of vertex indices for cell  element in Cells array."
},

{
    "location": "glossary.html#Chain-1",
    "page": "Glossary",
    "title": "Chain",
    "category": "section",
    "text": "Alias declation of LAR-specific data structure. Binary SparseVector to store the coordinates of a chain of N-cells. It is nnz=1 with value=1 for the coordinates of an elementary N-chain, constituted by  a single N-chain."
},

{
    "location": "glossary.html#ChainOp-1",
    "page": "Glossary",
    "title": "ChainOp",
    "category": "section",
    "text": "Alias declation of LAR-specific data structure.  SparseMatrix in Compressed Sparse Column format, contains the coordinate  representation of an operator between linear spaces of p-chains.  Operators p-Boundary p-Chain -> (p-1)-Chain and p-Coboundary p-Chain -> (p+1)-Chain are typically stored as  ChainOp with elements in -101 or in 01, for  signed and unsigned operators, respectively."
},

{
    "location": "glossary.html#ChainComplex-1",
    "page": "Glossary",
    "title": "ChainComplex",
    "category": "section",
    "text": "Alias declation of LAR-specific data structure. It is a  1-dimensional Array of ChainOp that provides storage for either the  chain of boundaries (from D to 0) or the transposed chain of coboundaries  (from 0 to D), with D the dimension of the embedding space, which may be either  R^2 or R^3."
},

{
    "location": "glossary.html#LAR_Model-1",
    "page": "Glossary",
    "title": "LAR_Model",
    "category": "section",
    "text": "Alias declation of LAR-specific data structure. LAR_Model is a pair (Geometry, Topology), where Geometry is stored as  Points, and Topology is stored as Array of Cells. The number of differents  Cells objects (i.e. Skeletons) of a n-dimensional cellular complex goes from 0 to n."
},

{
    "location": "glossary.html#LAR-1",
    "page": "Glossary",
    "title": "LAR",
    "category": "section",
    "text": "Alias declation of LAR-specific data structure. LAR_Model is a pair (Geometry, Topology), where Geometry is stored as  Points, and Topology asCells. "
},

{
    "location": "glossary.html#Hpc-1",
    "page": "Glossary",
    "title": "Hpc",
    "category": "section",
    "text": "Alias declation of LAR-specific data structure.  Hpc stands for Hierarchical Polyhedral Complex and is the geometric data structure  used by PLaSM (Programming LAnguage for Solid Modeling). See the Wiley\'s book  Geometric Programming for Computer-Aided Design and its  current Python library https://github.com/plasm-language/pyplasm."
},

]}
